name: Deploy Environment

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      lambda-function-name:
        required: true
        type: string
      aws-access-key-id:
        required: true
        type: string
      aws-secret-access-key:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      node-env:
        required: true
        type: string
      require-tests:
        required: true
        type: boolean
      s3-bucket:
        required: true
        type: string
        description: "S3 bucket for Lambda deployment packages"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        continue-on-error: ${{ !inputs.require-tests }}

      - name: Check test results
        if: inputs.require-tests
        run: |
          if [ $? -ne 0 ]; then
            echo "‚ùå Tests failed! Production deployment requires all tests to pass."
            exit 1
          fi
          echo "‚úÖ All tests passed!"

      - name: Build for Lambda
        run: npm run build:lambda

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Deploy via S3
        run: |
          echo "üöÄ Deploying via S3 to ${{ inputs.environment }} environment"
          echo "Lambda Function: ${{ inputs.lambda-function-name }}"
          echo "S3 Bucket: ${{ inputs.s3-bucket }}"
          echo "Region: ${{ inputs.aws-region }}"
          
          # Upload to S3
          S3_KEY="lambda-deployments/${{ inputs.environment }}/${{ github.sha }}/lambda-deployment.zip"
          aws s3 cp lambda-deployment.zip s3://${{ inputs.s3-bucket }}/$S3_KEY
          
          # Deploy from S3
          aws lambda update-function-code \
            --function-name ${{ inputs.lambda-function-name }} \
            --s3-bucket ${{ inputs.s3-bucket }} \
            --s3-key $S3_KEY \
            --region ${{ inputs.aws-region }}

      - name: Update Lambda configuration
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ inputs.lambda-function-name }} \
            --environment Variables="{NODE_ENV=${{ inputs.node-env }}}" \
            --region ${{ inputs.aws-region }}

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          aws lambda get-function \
            --function-name ${{ inputs.lambda-function-name }} \
            --region ${{ inputs.aws-region }} \
            --query 'Configuration.LastUpdateStatus' \
            --output text

      # Production-specific steps
      - name: Create production release
        if: inputs.environment == 'production'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Production deployment from main branch
            Environment: ${{ inputs.environment }}
            Commit: ${{ github.sha }}
            Lambda Function: ${{ inputs.lambda-function-name }}
            Deployment Method: S3
          draft: false
          prerelease: false

      - name: Deployment complete
        run: |
          echo "‚úÖ Successfully deployed to ${{ inputs.environment }} environment!"
          echo "üåê Lambda Function: ${{ inputs.lambda-function-name }}"
          echo "üìç Region: ${{ inputs.aws-region }}"
          echo "üîß Environment: ${{ inputs.node-env }}"
          echo "üì¶ Deployment Method: S3"
